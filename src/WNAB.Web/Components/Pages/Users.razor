@page "/users"
@inject UsersViewModel ViewModel
@layout MainLayoutNoSidebar
@implements IDisposable

<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <h1>Users</h1>
    </div>
    <div>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createUserModal" @onclick="OnAddUserClick">
            <i class="bi bi-person-plus me-1"></i>
            Create User
        </button>
        <button class="btn btn-outline-secondary ms-2" @onclick="OnRefreshClick" disabled="@ViewModel.Model.IsBusy">
            @if (ViewModel.Model.IsBusy)
            {
                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
            }
            else
            {
                <i class="bi bi-arrow-clockwise me-1"></i>
            }
            Refresh
        </button>
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(ViewModel.Model.StatusMessage))
{
    <div class="alert alert-info">
        <h6 class="alert-heading">
            <i class="bi bi-info-circle me-1"></i>
            Status
        </h6>
        <p class="mb-0">@ViewModel.Model.StatusMessage</p>
    </div>
}

<div class="responsive-panel">
    @if (ViewModel.Model.Users == null)
    {
        <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading users...</p>
        </div>
    }
    else if (ViewModel.Model.Users.Count == 0)
    {
        <div class="text-center p-4">
            <i class="bi bi-people fs-1 text-muted"></i>
            <p class="mt-2">No users found. Click "Create User" to add your first user.</p>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Status</th>
                        <th>Created</th>
                        <th width="120">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var u in ViewModel.Model.Users)
                    {
                        <tr>
                            <td class="fw-semibold">@u.FirstName @u.LastName</td>
                            <td>@u.Email</td>
                            <td>
                                <span class="badge @(u.IsActive ? "bg-success" : "bg-secondary")">
                                    @(u.IsActive ? "Active" : "Inactive")
                                </span>
                            </td>
                            <td class="text-muted">@u.CreatedAt.ToString("MMM dd, yyyy")</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditUser(u.Id)">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger ms-1" @onclick="() => DeleteUser(u.Id)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Include the Create User Modal -->
<CreateUserModal OnUserCreated="OnUserCreated" />

@code {
    // LLM-Dev:v6 Refactored to use WNAB.MVM ViewModels and Models for shared business logic
    // UI is now a thin presentation layer, all logic delegated to ViewModel/Model
    
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to property changes to trigger UI updates
        ViewModel.Model.PropertyChanged += OnModelPropertyChanged;
        
        await ViewModel.InitializeAsync();
    }

    private void OnModelPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        // When Model properties change, update the UI
        InvokeAsync(StateHasChanged);
    }

    private async Task OnRefreshClick()
    {
        await ViewModel.Model.RefreshAsync();
    }

    private async Task OnAddUserClick()
    {
        // Modal is shown via Bootstrap, but we call the ViewModel command for consistency
        // (the BlazorPopupService is a no-op)
        await ViewModel.AddUserCommand.ExecuteAsync(null);
    }

    private async Task OnUserCreated()
    {
        // Called by modal when user is created - refresh the list
        await ViewModel.Model.RefreshAsync();
    }

    // Placeholder action handlers
    private void EditUser(int userId)
    {
        // Future: open edit modal
    }

    private async Task DeleteUser(int userId)
    {
        // Future: implement delete with confirmation
    }

    public void Dispose()
    {
        if (ViewModel?.Model != null)
        {
            ViewModel.Model.PropertyChanged -= OnModelPropertyChanged;
        }
    }
}
