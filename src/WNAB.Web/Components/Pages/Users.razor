@page "/users"
@inject UserManagementService UsersService

<h1>Users</h1>

<button class="btn btn-secondary" @onclick="Load">Refresh</button>

@if (_error is not null)
{
    <div class="alert alert-danger mt-3">@_error</div>
}

<div class="mt-3 responsive-panel">
    @if (_users is null)
    {
        <p><em>Loading...</em></p>
    }
    else if (_users.Count == 0)
    {
        <p>No users found.</p>
    }
    else
    {
        <ul class="list-group">
            @foreach (var u in _users)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>@u.FirstName @u.LastName</span>
                    <small class="text-muted">@u.Email</small>
                </li>
            }
        </ul>
    }
}</div>

@code {
    private List<User>? _users;
    private string? _error;

    protected override async Task OnInitializedAsync() => await Load();

    private async Task Load()
    {
        _error = null;
        try
        {
            // LLM-Dev:v2 Use service list method to avoid HttpClient in UI.
            _users = await UsersService.GetUsersAsync();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    // LLM-Dev: List retrieval is done via UsersService.GetUsersAsync.
}
