@page "/users"
@inject UserManagementService UsersService
@layout MainLayoutNoSidebar

<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <h1>Users</h1>
    </div>
    <div>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createUserModal">
            <i class="bi bi-person-plus me-1"></i>
            Create User
        </button>
        <button class="btn btn-outline-secondary ms-2" @onclick="Load" disabled="@_isLoading">
            @if (_isLoading)
            {
                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
            }
            else
            {
                <i class="bi bi-arrow-clockwise me-1"></i>
            }
            Refresh
        </button>
    </div>
</div>

@if (_error is not null)
{
    <div class="alert alert-danger">@_error</div>
}

<div class="responsive-panel">
    @if (_users is null)
    {
        <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading users...</p>
        </div>
    }
    else if (_users.Count == 0)
    {
        <div class="text-center p-4">
            <i class="bi bi-people fs-1 text-muted"></i>
            <p class="mt-2">No users found. Click "Create User" to add your first user.</p>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Status</th>
                        <th>Created</th>
                        <th width="120">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var u in _users)
                    {
                        <tr>
                            <td class="fw-semibold">@u.FirstName @u.LastName</td>
                            <td>@u.Email</td>
                            <td>
                                <span class="badge @(u.IsActive ? "bg-success" : "bg-secondary")">
                                    @(u.IsActive ? "Active" : "Inactive")
                                </span>
                            </td>
                            <td class="text-muted">@u.CreatedAt.ToString("MMM dd, yyyy")</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditUser(u.Id)">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger ms-1" @onclick="() => DeleteUser(u.Id)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Include the Create User Modal -->
<CreateUserModal OnUserCreated="RefreshUsersAfterCreate" />

@code {
    // LLM-Dev:v4 Updated to use popup modals instead of navigation pages, matching MAUI pattern
    private List<User>? _users;
    private string? _error;
    private bool _isLoading;

    protected override async Task OnInitializedAsync() => await Load();

    private async Task Load()
    {
        if (_isLoading) return;
        
        _error = null;
        _isLoading = true;
        StateHasChanged();
        
        try
        {
            // LLM-Dev:v4 Use service list method to avoid HttpClient in UI.
            _users = await UsersService.GetUsersAsync();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally 
        { 
            _isLoading = false;
            StateHasChanged();
        }
    }

    // LLM-Dev:v4 Handler for when user is created in modal to refresh list
    private async Task RefreshUsersAfterCreate()
    {
        await Load();
    }

    // LLM-Dev:v4 Add action handlers for table actions
    private void EditUser(int userId)
    {
        // This could open an edit modal popup - for now just show an alert
        // In a future version, this could open an edit user modal popup
    }

    private async Task DeleteUser(int userId)
    {
        if (await ConfirmDelete())
        {
            try
            {
                // Implementation would call delete service method
                await Load(); // Refresh after delete
            }
            catch (Exception ex)
            {
                _error = $"Error deleting user: {ex.Message}";
            }
        }
    }

    private Task<bool> ConfirmDelete()
    {
        // In a real implementation, this would use a confirmation modal
        // For now, return false to prevent accidental deletion
        return Task.FromResult(false);
    }
}
