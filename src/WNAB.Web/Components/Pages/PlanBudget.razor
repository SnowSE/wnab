@page "/plan-budget"
@inject PlanBudgetViewModel ViewModel
@layout MainLayoutNoSidebar
@implements IDisposable

<!-- LLM-Dev:v6 Refactored to use WNAB.MVM ViewModels and Models for shared business logic -->
<!-- LLM-Dev: PlanBudget page converted from MAUI XAML to Blazor Razor component -->
<!-- LLM-Dev: Maintains same layout pattern - categories list (togglable), main content area, and bottom toolbar -->

<div class="plan-budget-container">
    <!-- Toggle button when categories are hidden -->
    @if (!ViewModel.Model.IsCategoriesVisible)
    {
        <button class="btn btn-primary position-absolute" style="top: 0px; left: 150px; z-index: 1000;" @onclick="OnToggleCategoriesClick">
            Display Categories
        </button>
    }

    <div class="d-flex h-100">
        <!-- LLM-Dev: Left column - Categories list, visibility controlled by Model.IsCategoriesVisible -->
        @if (ViewModel.Model.IsCategoriesVisible)
        {
            <div class="categories-panel bg-light border-end" style="width: 250px; overflow-y: auto;">
                <div class="p-3">
                    <!-- LLM-Dev: Header with title and close button in upper right corner -->
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="mb-0 fw-bold">Categories</h5>
                        <button class="btn-close" @onclick="OnToggleCategoriesClick"></button>
                    </div>

                    <!-- LLM-Dev: Button to create a new category -->
                    <button class="btn btn-primary w-100 mb-3" data-bs-toggle="modal" data-bs-target="#createCategoryModal" @onclick="OnAddCategoryClick" disabled="@(!ViewModel.Model.IsLoggedIn)">
                        <i class="bi bi-plus-circle me-1"></i> New Category
                    </button>

                    <!-- LLM-Dev: Available categories - clicking moves them to allocated list -->
                    @if (ViewModel.Model.AvailableCategories != null && ViewModel.Model.AvailableCategories.Count > 0)
                    {
                        <div class="list-group">
                            @foreach (var category in ViewModel.Model.AvailableCategories)
                            {
                                <button class="list-group-item list-group-item-action" @onclick="() => OnAllocateCategoryClick(category)">
                                    @category.Name
                                </button>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted small">No available categories</p>
                    }

                    <!-- LLM-Dev: Status message for loading/error feedback -->
                    @if (ViewModel.Model.IsBusy)
                    {
                        <div class="mt-3 text-center">
                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                <span class="visually-hidden">@ViewModel.Model.StatusMessage</span>
                            </div>
                            <p class="small text-muted mt-1">@ViewModel.Model.StatusMessage</p>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- LLM-Dev: Main content area - Budget planning with allocated categories -->
        <div class="flex-fill d-flex flex-column" style="overflow: hidden;">
            <div class="flex-fill overflow-auto p-4">
                <!-- Month/Year Selector -->
                <div class="mb-4">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Month</label>
                            <select class="form-select" @bind="ViewModel.SelectedMonthName" @bind:after="OnMonthYearChanged">
                                @foreach (var month in ViewModel.MonthOptions)
                                {
                                    <option value="@month">@month</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Year</label>
                            <input type="number" class="form-control" @bind="ViewModel.Model.CurrentYear" @bind:after="OnMonthYearChanged" min="2000" max="2100" />
                        </div>
                    </div>
                </div>

                @if (!string.IsNullOrWhiteSpace(ViewModel.Model.StatusMessage))
                {
                    <div class="alert alert-info">@ViewModel.Model.StatusMessage</div>
                }

                @if (!ViewModel.Model.IsLoggedIn)
                {
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle me-1"></i>
                        Please log in to plan budget.
                    </div>
                }

                <!-- LLM-Dev: Allocated categories for budget planning -->
                @if (ViewModel.Model.BudgetAllocations != null && ViewModel.Model.BudgetAllocations.Count > 0)
                {
                    @foreach (var allocation in ViewModel.Model.BudgetAllocations)
                    {
                        <div class="card mb-3">
                            <div class="card-body">
                                <!-- LLM-Dev: Vertical layout with category name on top, budget entry below, and remove button in corner -->
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <h6 class="fw-bold mb-0">@allocation.Category?.Name</h6>
                                    <button class="btn-close" @onclick="() => OnRemoveAllocationClick(allocation)"></button>
                                </div>
                                
                                <!-- LLM-Dev: Budget entry field below category name -->
                                <div class="d-flex align-items-center">
                                    <label class="me-2 mb-0">Budget Amount: $</label>
                                    <input type="number" 
                                           class="form-control" 
                                           style="width: 150px;" 
                                           step="0.01" 
                                           placeholder="0.00"
                                           @bind="allocation.BudgetedAmount" />
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <!-- LLM-Dev: Empty state message when no categories allocated -->
                    <div class="text-center mt-5">
                        <i class="bi bi-calendar-check fs-1 text-muted"></i>
                        <p class="text-muted mt-3">No categories added to plan yet. Click 'Display Categories' to get started.</p>
                    </div>
                }
            </div>

            <!-- LLM-Dev: Bottom toolbar with Save and Cancel buttons -->
            <div class="bg-light border-top p-3">
                <div class="d-flex justify-content-end gap-2">
                    <button class="btn btn-secondary" @onclick="OnCancelClick">
                        Cancel
                    </button>
                    <button class="btn btn-primary" @onclick="OnSaveClick" disabled="@ViewModel.Model.IsBusy">
                        @if (ViewModel.Model.IsBusy)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                        }
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- LLM-Dev: Include the Create Category Modal -->
<CreateCategoryModal OnCategoryCreated="OnCategoryCreated" />

@code {
    // LLM-Dev:v6 Refactored to use WNAB.MVM ViewModels and Models for shared business logic
    // UI is now a thin presentation layer, all logic delegated to ViewModel/Model
    
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to property changes to trigger UI updates
        ViewModel.Model.PropertyChanged += OnModelPropertyChanged;
        ViewModel.PropertyChanged += OnViewModelPropertyChanged;
        
        await ViewModel.InitializeAsync();
    }

    private void OnModelPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        // When Model properties change, update the UI
        InvokeAsync(StateHasChanged);
    }

    private void OnViewModelPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        // When ViewModel properties change, update the UI
        InvokeAsync(StateHasChanged);
    }

    private void OnToggleCategoriesClick()
    {
        ViewModel.ToggleCategoriesVisibilityCommand.Execute(null);
    }

    private async Task OnAddCategoryClick()
    {
        // Modal is shown via Bootstrap, but we call the ViewModel command for consistency
        await ViewModel.AddCategoryCommand.ExecuteAsync(null);
    }

    private async Task OnCategoryCreated()
    {
        // Called by modal when category is created - ViewModel handles adding to allocations
        await ViewModel.Model.HandleNewCategoryAsync();
    }

    private void OnAllocateCategoryClick(WNAB.Data.Category category)
    {
        ViewModel.AllocateCategoryCommand.Execute(category);
    }

    private void OnRemoveAllocationClick(WNAB.Data.CategoryAllocation allocation)
    {
        ViewModel.RemoveAllocationCommand.Execute(allocation);
    }

    private async Task OnMonthYearChanged()
    {
        await ViewModel.SetMonthYearCommand.ExecuteAsync(null);
    }

    private async Task OnCancelClick()
    {
        await ViewModel.CancelCommand.ExecuteAsync(null);
    }

    private async Task OnSaveClick()
    {
        await ViewModel.SaveCommand.ExecuteAsync(null);
    }

    public void Dispose()
    {
        if (ViewModel?.Model != null)
        {
            ViewModel.Model.PropertyChanged -= OnModelPropertyChanged;
        }
        if (ViewModel != null)
        {
            ViewModel.PropertyChanged -= OnViewModelPropertyChanged;
        }
    }
}

<style>
    .plan-budget-container {
        height: calc(100vh - 60px);
        overflow: hidden;
    }

    .categories-panel {
        height: 100%;
    }

    .list-group-item {
        cursor: pointer;
    }

    .list-group-item:hover {
        background-color: #e9ecef;
    }
</style>
