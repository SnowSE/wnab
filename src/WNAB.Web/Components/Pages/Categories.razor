@page "/categories"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject CategoryManagementService CategoriesService
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject NavigationManager Navigation
@layout MainLayoutNoSidebar

<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <h1>Categories</h1>
    </div>
    <div>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createCategoryModal" disabled="@(!_isLoggedIn)">
            <i class="bi bi-plus-circle me-1"></i>
            Create Category
        </button>
        <button class="btn btn-outline-secondary ms-2" @onclick="RefreshAsync" disabled="@_isLoading">
            @if (_isLoading)
            {
                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
            }
            else
            {
                <i class="bi bi-arrow-clockwise me-1"></i>
            }
            Refresh
        </button>
    </div>
</div>

@if (!_isLoggedIn)
{
    <div class="alert alert-warning">
        <i class="bi bi-exclamation-triangle me-1"></i>
        Please <a href="/login" class="alert-link">log in</a> to view your categories.
    </div>
}
else if (!string.IsNullOrWhiteSpace(_statusMessage))
{
    <div class="alert alert-info">@_statusMessage</div>
}

@if (_error is not null)
{
    <div class="alert alert-danger">@_error</div>
}

<div class="responsive-panel">
    @if (!_isLoggedIn)
    {
        <div class="text-center p-4">
            <i class="bi bi-person-x fs-1 text-muted"></i>
            <p class="mt-2">Please log in to view your categories.</p>
            <a href="/login" class="btn btn-primary">
                <i class="bi bi-box-arrow-in-right me-1"></i>
                Login
            </a>
        </div>
    }
    else if (_items is null)
    {
        <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading categories...</p>
        </div>
    }
    else if (_items.Count == 0)
    {
        <div class="text-center p-4">
            <i class="bi bi-tags fs-1 text-muted"></i>
            <p class="mt-2">No categories found. Click "Create Category" to add your first category.</p>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Category Name</th>
                        <th>Type</th>
                        <th>Status</th>
                        <th>Created</th>
                        <th width="120">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var c in _items)
                    {
                        <tr>
                            <td class="fw-semibold">@c.Name</td>
                            <td>
                                <span class="badge @(c.IsIncome ? "bg-success" : "bg-primary")">
                                    @(c.IsIncome ? "Income" : "Expense")
                                </span>
                            </td>
                            <td>
                                <span class="badge @(c.IsActive ? "bg-success" : "bg-secondary")">
                                    @(c.IsActive ? "Active" : "Inactive")
                                </span>
                            </td>
                            <td class="text-muted">@c.CreatedAt.ToString("MMM dd, yyyy")</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditCategory(c.Id)">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger ms-1" @onclick="() => DeleteCategory(c.Id)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Include the Create Category Modal -->
<CreateCategoryModal OnCategoryCreated="RefreshCategoriesAfterCreate" />

@code {
    // LLM-Dev:v5 Fixed authentication issues: added proper user session checks and user-specific category loading, matching MAUI pattern
    private bool _isLoading;
    private List<Category>? _items;
    private string? _error;
    private string? _statusMessage;
    private int _userId;
    private bool _isLoggedIn;

    protected override async Task OnInitializedAsync() => await InitializeAsync();

    private async Task InitializeAsync()
    {
        await CheckUserSessionAsync();
        if (_isLoggedIn)
        {
            await RefreshAsync();
        }
    }

    // LLM-Dev:v5 Check if user is logged in and get user ID from protected storage (following MAUI pattern)
    private async Task CheckUserSessionAsync()
    {
        try
        {
            var result = await ProtectedLocalStorage.GetAsync<string>("userId");
            var userIdString = result.Success ? (result.Value ?? string.Empty).Trim() : string.Empty;
            
            if (!string.IsNullOrWhiteSpace(userIdString) && int.TryParse(userIdString, out var parsedUserId))
            {
                _userId = parsedUserId;
                _isLoggedIn = true;
                _statusMessage = $"Logged in as user {_userId}";
            }
            else
            {
                _isLoggedIn = false;
                _statusMessage = "Please log in to view categories";
                _items = null; // Clear any existing data
            }
        }
        catch
        {
            _isLoggedIn = false;
            _statusMessage = "Error checking login status";
            _items = null; // Clear any existing data
        }
        
        StateHasChanged();
    }

    private async Task RefreshAsync()
    {
        if (_isLoading) return;
        
        // Always check session first
        await CheckUserSessionAsync();
        
        if (!_isLoggedIn || _userId <= 0)
        {
            return; // Don't try to load data if not logged in
        }
        
        try
        {
            _isLoading = true;
            _error = null;
            _statusMessage = "Loading categories...";
            StateHasChanged();
            
            // LLM-Dev:v5 Use user-specific method instead of getting all categories
            // userId now comes from authentication token on the API side
            _items = await CategoriesService.GetCategoriesForUserAsync();
            _statusMessage = _items.Count == 0 ? "No categories found" : $"Loaded {_items.Count} categories";
        }
        catch (Exception ex)
        {
            _error = $"Error loading categories: {ex.Message}";
            _statusMessage = null;
        }
        finally 
        { 
            _isLoading = false;
            StateHasChanged();
        }
    }

    // LLM-Dev:v5 Handler for when category is created in modal to refresh list
    private async Task RefreshCategoriesAfterCreate()
    {
        await RefreshAsync();
    }

    // LLM-Dev:v5 Add action handlers for table actions
    private void EditCategory(int categoryId)
    {
        // This could open an edit modal popup - for now just show an alert
        // In a future version, this could open an edit category modal popup
    }

    private async Task DeleteCategory(int categoryId)
    {
        if (await ConfirmDelete())
        {
            try
            {
                // Implementation would call delete service method
                await RefreshAsync(); // Refresh after delete
            }
            catch (Exception ex)
            {
                _error = $"Error deleting category: {ex.Message}";
            }
        }
    }

    private Task<bool> ConfirmDelete()
    {
        // In a real implementation, this would use a confirmation modal
        // For now, return false to prevent accidental deletion
        return Task.FromResult(false);
    }
}
