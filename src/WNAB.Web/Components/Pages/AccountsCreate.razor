@page "/accounts/create"
@inject AccountManagementService AccountsService

<h1>Create Account</h1>

<EditForm Model="this" OnValidSubmit="Create">
    <div class="row g-3 responsive-panel">
        <div class="col-12 col-md-6">
            <label class="form-label">Name</label>
            <input class="form-control" @bind-value="_name" required />
        </div>
        <div class="col-12 col-md-6">
            <label class="form-label">User Id</label>
            <input class="form-control" type="number" @bind-value="_userId" required />
        </div>
        <div class="col-12">
            <button class="btn btn-primary" type="submit">Create</button>
        </div>
    </div>
</EditForm>

@if (!string.IsNullOrWhiteSpace(_result))
{
    <pre class="mt-3">@_result</pre>
}
@if (!string.IsNullOrWhiteSpace(_error))
{
    <div class="alert alert-danger mt-3">@_error</div>
}

@code {
    private string? _name;
    private int _userId;
    private string? _result;
    private string? _error;

    private async Task Create()
    {
        _result = _error = null;
        try
        {
            // LLM-Dev (touched): Use service to build DTO and POST for the user.
            var record = AccountManagementService.CreateAccountRecord(_name ?? string.Empty);
            var id = await AccountsService.CreateAccountAsync(_userId, record);
            _result = $"Created account with Id {id}";
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }
}
