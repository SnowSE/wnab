@page "/accounts"
@inject AccountManagementService AccountsService

<h1>Accounts</h1>

<div class="mb-3">
    <label>User Id</label>
    <input class="form-control" type="number" @bind-value="_userId" />
</div>
<button class="btn btn-secondary" @onclick="Load">Load Accounts</button>

@if (_error is not null)
{
    <div class="alert alert-danger mt-3">@_error</div>
}

<div class="mt-3 responsive-panel">
    @if (_items is null)
    {
        <p><em>No data yet.</em></p>
    }
    else if (_items.Count == 0)
    {
        <p>No accounts found.</p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-sm align-middle">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Balance</th>
                        <th>Updated</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var a in _items)
                    {
                        <tr>
                            <td>@a.AccountName</td>
                            <td>@a.AccountType</td>
                            <td>@a.CachedBalance</td>
                            <td>@a.UpdatedAt.ToShortDateString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private int _userId;
    private List<Account>? _items;
    private string? _error;

    private async Task Load()
    {
        _error = null;
        try
        {
            // LLM-Dev:v2 Use service list method to avoid HttpClient in UI.
            _items = await AccountsService.GetAccountsForUserAsync(_userId);
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }
}
