@page "/accounts"
@inject AccountsViewModel ViewModel
@layout MainLayoutNoSidebar
@implements IDisposable

<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <h1>Accounts</h1>
    </div>
    <div>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createAccountModal" @onclick="OnAddAccountClick">
            <i class="bi bi-plus-circle me-1"></i>
            Create Account
        </button>
        <button class="btn btn-outline-secondary ms-2" @onclick="OnRefreshClick" disabled="@ViewModel.Model.IsBusy">
            @if (ViewModel.Model.IsBusy)
            {
                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
            }
            else
            {
                <i class="bi bi-arrow-clockwise me-1"></i>
            }
            Refresh
        </button>
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(ViewModel.Model.StatusMessage))
{
    <div class="alert alert-info">@ViewModel.Model.StatusMessage</div>
}

@if (!ViewModel.Model.IsLoggedIn)
{
    <div class="alert alert-warning">
        <i class="bi bi-exclamation-triangle me-1"></i>
        Please log in to view accounts.
    </div>
}

<div class="responsive-panel">
    @if (ViewModel.Model.Items == null)
    {
        <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading accounts...</p>
        </div>
    }
    else if (ViewModel.Model.Items.Count == 0)
    {
        <div class="text-center p-4">
            <i class="bi bi-wallet2 fs-1 text-muted"></i>
            <p class="mt-2">No accounts found. Click "Create Account" to add your first account.</p>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Account Name</th>
                        <th>Type</th>
                        <th class="text-end">Balance</th>
                        <th>Last Updated</th>
                        <th width="120">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var a in ViewModel.Model.Items)
                    {
                        <tr>
                            <td class="fw-semibold">@a.AccountName</td>
                            <td>
                                <span class="badge bg-secondary">@a.AccountType</span>
                            </td>
                            <td class="text-end">
                                <span class="@(a.CachedBalance >= 0 ? "text-success" : "text-danger")">
                                    @a.CachedBalance.ToString("C")
                                </span>
                            </td>
                            <td class="text-muted">@a.UpdatedAt.ToString("MMM dd, yyyy")</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewTransactions(a.Id)">
                                    <i class="bi bi-receipt"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger ms-1" @onclick="() => DeleteAccount(a.Id)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Include the Create Account Modal -->
<CreateAccountModal OnAccountCreated="OnAccountCreated" />

@code {
    // LLM-Dev:v6 Refactored to use WNAB.MVM ViewModels and Models for shared business logic
    // UI is now a thin presentation layer, all logic delegated to ViewModel/Model
    
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to property changes to trigger UI updates
        ViewModel.Model.PropertyChanged += OnModelPropertyChanged;
        
        await ViewModel.InitializeAsync();
    }

    private void OnModelPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        // When Model properties change, update the UI
        InvokeAsync(StateHasChanged);
    }

    private async Task OnRefreshClick()
    {
        await ViewModel.RefreshCommand.ExecuteAsync(null);
    }

    private async Task OnAddAccountClick()
    {
        // Modal is shown via Bootstrap, but we call the ViewModel command for consistency
        await ViewModel.AddAccountCommand.ExecuteAsync(null);
    }

    private async Task OnAccountCreated()
    {
        // Called by modal when account is created - refresh the list
        await ViewModel.Model.RefreshAsync();
    }

    // Placeholder action handlers
    private void ViewTransactions(int accountId)
    {
        // Future: navigate to transactions filtered by account
    }

    private async Task DeleteAccount(int accountId)
    {
        // Future: implement delete with confirmation
    }

    public void Dispose()
    {
        if (ViewModel?.Model != null)
        {
            ViewModel.Model.PropertyChanged -= OnModelPropertyChanged;
        }
    }
}