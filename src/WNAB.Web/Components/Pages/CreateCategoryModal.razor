@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject CategoryManagementService CategoriesService
@inject ProtectedLocalStorage ProtectedLocalStorage

<!-- Create Category Modal -->
<div class="modal fade" id="createCategoryModal" tabindex="-1" aria-labelledby="createCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createCategoryModalLabel">Create Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <EditForm Model="this" OnValidSubmit="Create">
                <div class="modal-body">
                    @if (!string.IsNullOrWhiteSpace(_statusMessage))
                    {
                        <div class="alert alert-info">@_statusMessage</div>
                    }
                    @if (!string.IsNullOrWhiteSpace(_error))
                    {
                        <div class="alert alert-danger">@_error</div>
                    }
                    @if (!string.IsNullOrWhiteSpace(_result))
                    {
                        <div class="alert alert-success">@_result</div>
                    }
                    
                    <div class="mb-3">
                        <label class="form-label">Category Name</label>
                        <input class="form-control" @bind-value="_name" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button class="btn btn-primary" type="submit" disabled="@_isCreating">
                        @if (_isCreating)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        Create Category
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    // LLM-Dev:v4 Modal popup component for creating categories, matching MAUI popup pattern
    private string? _name;
    private int _userId;
    private bool _isLoggedIn;
    private bool _isCreating;
    private string? _result;
    private string? _error;
    private string? _statusMessage;

    [Parameter] public EventCallback OnCategoryCreated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CheckUserSessionAsync();
    }

    // LLM-Dev:v4 Check if user is logged in and get user ID from protected storage (matching MAUI pattern)
    private async Task CheckUserSessionAsync()
    {
        try
        {
            var result = await ProtectedLocalStorage.GetAsync<string>("userId");
            var userIdString = result.Success ? (result.Value ?? string.Empty).Trim() : string.Empty;
            
            if (!string.IsNullOrWhiteSpace(userIdString) && int.TryParse(userIdString, out var parsedUserId))
            {
                _userId = parsedUserId;
                _isLoggedIn = true;
                _statusMessage = $"Creating category for user {_userId}";
            }
            else
            {
                _isLoggedIn = false;
                _statusMessage = "Please log in first to create a category";
            }
        }
        catch
        {
            _isLoggedIn = false;
            _statusMessage = "Error checking login status";
        }
    }

    private async Task Create()
    {
        _result = _error = null;
        
        if (!_isLoggedIn || _userId <= 0)
        {
            _error = "Please log in first to create a category";
            return;
        }

        if (string.IsNullOrWhiteSpace(_name))
        {
            _error = "Please enter a category name";
            return;
        }

        try
        {
            _isCreating = true;
            StateHasChanged();

            // LLM-Dev:v5 Fix service calls to match CategoryManagementService method signatures
            // userId now comes from authentication token on the API side
            var record = CategoryManagementService.CreateCategoryRecord(_name);
            var id = await CategoriesService.CreateCategoryAsync(record);
            _result = $"Category '{_name}' created successfully with ID {id}";
            
            // Clear the name field for next use (matching MAUI pattern)
            _name = string.Empty;
            
            // Notify parent component to refresh the categories list
            await OnCategoryCreated.InvokeAsync();
        }
        catch (Exception ex)
        {
            _error = $"Error creating category: {ex.Message}";
        }
        finally
        {
            _isCreating = false;
            StateHasChanged();
        }
    }
}