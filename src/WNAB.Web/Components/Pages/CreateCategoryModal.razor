@using WNAB.Data
@inject CategoryManagementService CategoriesService

<!-- Create Category Modal -->
<div class="modal fade" id="createCategoryModal" tabindex="-1" aria-labelledby="createCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createCategoryModalLabel">Create Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <EditForm Model="this" OnValidSubmit="Create">
                <div class="modal-body">
                    @if (!string.IsNullOrWhiteSpace(_statusMessage))
                    {
                        <div class="alert alert-info">@_statusMessage</div>
                    }
                    @if (!string.IsNullOrWhiteSpace(_error))
                    {
                        <div class="alert alert-danger">@_error</div>
                    }
                    @if (!string.IsNullOrWhiteSpace(_result))
                    {
                        <div class="alert alert-success">@_result</div>
                    }
                    
                    <div class="mb-3">
                        <label class="form-label">Category Name</label>
                        <input class="form-control" @bind-value="_name" required />
                    </div>

                    <div class="row g-2">
                        <div class="col-6 mb-3">
                            <label class="form-label">Type</label>
                            <select class="form-select" @bind="_isIncome">
                                <option value="false">Expense</option>
                                <option value="true">Income</option>
                            </select>
                        </div>
                        <div class="col-6 mb-3">
                            <label class="form-label">Color</label>
                            <div class="d-flex gap-2 align-items-center">
                                @foreach (var c in _colorOptions)
                                {
                                    <button type="button" class="color-swatch btn btn-sm p-0" style="background-color:@c; border: none;" @onclick="() => SelectColor(c)">
                                        <div class="swatch-inner @(c == _selectedColor ? "swatch-selected" : "")" style="background-color:@c"></div>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button class="btn btn-primary" type="submit" disabled="@_isCreating">
                        @if (_isCreating)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        Create Category
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    // LLM-Dev:v4 Modal popup component for creating categories, matching MAUI popup pattern
    private string? _name;
    private bool _isCreating;
    private string? _result;
    private string? _error;
    private string? _statusMessage;
    private bool _isIncome = false;
    private string _selectedColor = "#ef4444";
    private readonly List<string> _colorOptions = new()
    {
        "#ef4444", // red
        "#f59e0b", // orange
        "#10b981", // green
        "#3b82f6", // blue
        "#6366f1", // indigo
        "#7c3aed", // purple
        "#ec4899", // pink
        "#14b8a6"  // teal
    };

    [Parameter] public EventCallback OnCategoryCreated { get; set; }

    private async Task Create()
    {
        _result = _error = null;

        if (string.IsNullOrWhiteSpace(_name))
        {
            _error = "Please enter a category name";
            return;
        }

        try
        {
            _isCreating = true;
            StateHasChanged();

            // userId now comes from authentication token on the API side; pass 0 in DTO
            var record = new CategoryRecord(_name!);
            var id = await CategoriesService.CreateCategoryAsync(record);
            _result = $"Category '{_name}' created successfully with ID {id}";

            // Clear the name field for next use (matching MAUI pattern)
            _name = string.Empty;
            _selectedColor = _colorOptions.First();
            _isIncome = false;

            // Notify parent component to refresh the categories list
            await OnCategoryCreated.InvokeAsync();
        }
        catch (Exception ex)
        {
            _error = $"Error creating category: {ex.Message}";
        }
        finally
        {
            _isCreating = false;
            StateHasChanged();
        }
    }

    private void SelectColor(string color)
    {
        _selectedColor = color;
    }
}