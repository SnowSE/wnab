@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject TransactionManagementService TransactionsService
@inject AccountManagementService AccountsService
@inject CategoryManagementService CategoriesService
@inject ProtectedLocalStorage ProtectedLocalStorage

<!-- Create Transaction Modal -->
<div class="modal fade" id="createTransactionModal" tabindex="-1" aria-labelledby="createTransactionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createTransactionModalLabel">Create Transaction</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <EditForm Model="this" OnValidSubmit="Create">
                <div class="modal-body">
                    @if (!string.IsNullOrWhiteSpace(_statusMessage))
                    {
                        <div class="alert alert-info">@_statusMessage</div>
                    }
                    @if (!string.IsNullOrWhiteSpace(_error))
                    {
                        <div class="alert alert-danger">@_error</div>
                    }
                    @if (!string.IsNullOrWhiteSpace(_result))
                    {
                        <div class="alert alert-success">@_result</div>
                    }
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Account</label>
                                <select class="form-select" @bind="_accountId" required>
                                    <option value="0">Select an account...</option>
                                    @if (_accounts != null)
                                    {
                                        @foreach (var account in _accounts)
                                        {
                                            <option value="@account.Id">@account.AccountName</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Transaction Date</label>
                                <input type="date" class="form-control" @bind="_transactionDate" required />
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Payee</label>
                                <input class="form-control" @bind="_payee" required />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Amount</label>
                                <input type="number" step="0.01" class="form-control" @bind="_amount" required />
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <input class="form-control" @bind="_description" required />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Category</label>
                        <select class="form-select" @bind="_categoryId" required>
                            <option value="0">Select a category...</option>
                            @if (_categories != null)
                            {
                                @foreach (var category in _categories)
                                {
                                    <option value="@category.Id">@category.Name (@(category.IsIncome ? "Income" : "Expense"))</option>
                                }
                            }
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Notes (Optional)</label>
                        <textarea class="form-control" rows="2" @bind="_notes"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button class="btn btn-primary" type="submit" disabled="@_isCreating">
                        @if (_isCreating)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        Create Transaction
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    // LLM-Dev:v2 Modal popup component for creating transactions, matching MAUI popup pattern. Fixed binding issues.
    private int _accountId;
    private string _payee = string.Empty;
    private string _description = string.Empty;
    private decimal _amount;
    private DateTime _transactionDate = DateTime.Today;
    private int _categoryId;
    private string _notes = string.Empty;
    
    private int _userId;
    private bool _isLoggedIn;
    private bool _isCreating;
    private string? _result;
    private string? _error;
    private string? _statusMessage;
    
    private List<Account>? _accounts;
    private List<Category>? _categories;

    [Parameter] public EventCallback OnTransactionCreated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CheckUserSessionAsync();
        if (_isLoggedIn)
        {
            await LoadAccountsAndCategoriesAsync();
        }
    }

    // LLM-Dev:v1 Check if user is logged in and get user ID from protected storage (matching MAUI pattern)
    private async Task CheckUserSessionAsync()
    {
        try
        {
            var result = await ProtectedLocalStorage.GetAsync<string>("userId");
            var userIdString = result.Success ? (result.Value ?? string.Empty).Trim() : string.Empty;
            
            if (!string.IsNullOrWhiteSpace(userIdString) && int.TryParse(userIdString, out var parsedUserId))
            {
                _userId = parsedUserId;
                _isLoggedIn = true;
                _statusMessage = $"Creating transaction for user {_userId}";
            }
            else
            {
                _isLoggedIn = false;
                _statusMessage = "Please log in first to create a transaction";
            }
        }
        catch
        {
            _isLoggedIn = false;
            _statusMessage = "Error checking login status";
        }
    }

    private async Task LoadAccountsAndCategoriesAsync()
    {
        try
        {
            // Load user's accounts
            _accounts = await AccountsService.GetAccountsForUserAsync(_userId);
            
            // Load all categories
            _categories = await CategoriesService.GetCategoriesAsync();
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _error = $"Error loading accounts and categories: {ex.Message}";
        }
    }

    private async Task Create()
    {
        _result = _error = null;
        
        if (!_isLoggedIn || _userId <= 0)
        {
            _error = "Please log in first to create a transaction";
            return;
        }

        if (_accountId <= 0)
        {
            _error = "Please select an account";
            return;
        }

        if (string.IsNullOrWhiteSpace(_payee))
        {
            _error = "Please enter a payee";
            return;
        }

        if (string.IsNullOrWhiteSpace(_description))
        {
            _error = "Please enter a description";
            return;
        }

        if (_amount == 0)
        {
            _error = "Please enter a non-zero amount";
            return;
        }

        if (_categoryId <= 0)
        {
            _error = "Please select a category";
            return;
        }

        try
        {
            _isCreating = true;
            StateHasChanged();

            // LLM-Dev:v1 Create transaction with single split for simplicity
            var record = TransactionManagementService.CreateSimpleTransactionRecord(
                _accountId, _payee, _description, _amount, _transactionDate, _categoryId, string.IsNullOrWhiteSpace(_notes) ? null : _notes);
            
            var id = await TransactionsService.CreateTransactionAsync(record);
            _result = $"Transaction '{_description}' created successfully with ID {id}";
            
            // Clear the form for next use (matching MAUI pattern)
            ClearForm();
            
            // Notify parent component to refresh the transactions list
            await OnTransactionCreated.InvokeAsync();
        }
        catch (Exception ex)
        {
            _error = $"Error creating transaction: {ex.Message}";
        }
        finally
        {
            _isCreating = false;
            StateHasChanged();
        }
    }

    private void ClearForm()
    {
        _accountId = 0;
        _payee = string.Empty;
        _description = string.Empty;
        _amount = 0;
        _transactionDate = DateTime.Today;
        _categoryId = 0;
        _notes = string.Empty;
    }
}