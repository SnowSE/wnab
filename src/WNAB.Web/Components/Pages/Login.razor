@page "/login"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject NavigationManager Nav
@inject UserManagementService UserService

<h1>Login</h1>

<EditForm Model="this" OnValidSubmit="Save">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label class="form-label">User ID</label>
        <InputText class="form-control" @bind-Value="UserId" disabled="@IsLoading" />
        <ValidationMessage For="() => UserId" />
    </div>

    <button class="btn btn-primary" type="submit" disabled="@IsLoading">
        @if (IsLoading)
        {
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        }
        Login
    </button>
    @if (!string.IsNullOrEmpty(Message))
    {
        <span class="ms-3 text-success">@Message</span>
    }
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3">@ErrorMessage</div>
    }
</EditForm>

@code {
    // LLM-Dev:v2 Updated to validate user exists in database before allowing login. Added UserManagementService dependency.
    [System.ComponentModel.DataAnnotations.Required]
    public string? UserId { get; set; }

    public string? Message { get; set; }
    public string? ErrorMessage { get; set; }
    public bool IsLoading { get; set; }

    private async Task Save()
    {
        ErrorMessage = null;
        Message = null;

        var id = (UserId ?? string.Empty).Trim();
        if (string.IsNullOrWhiteSpace(id))
        {
            ErrorMessage = "Please enter a user ID.";
            return;
        }

        // Validate user ID is a number
        if (!int.TryParse(id, out int userIdInt))
        {
            ErrorMessage = "User ID must be a number.";
            return;
        }

        IsLoading = true;
        StateHasChanged();

        try
        {
            // LLM-Dev:v2 Check if user exists in database before allowing login
            var user = await UserService.GetUserByIdAsync(userIdInt);
            if (user is null)
            {
                ErrorMessage = "The specified user ID does not exist in the database or is inactive.";
                return;
            }

            // User exists, proceed with login
            await ProtectedLocalStorage.SetAsync("userId", id);
            Message = $"Login successful! Welcome {user.FirstName} {user.LastName}.";
            StateHasChanged();
            
            // LLM-Dev:v2 After saving, navigate back to home to cause layout to re-render and pick up the new value
            await Task.Delay(1500); // Show success message briefly
            Nav.NavigateTo("/");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to validate user: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
}
