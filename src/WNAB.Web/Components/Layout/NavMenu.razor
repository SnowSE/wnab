@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStorage

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid d-flex justify-content-between align-items-center">
        <a class="navbar-brand" href="">WNAB.Web</a>
        <div class="d-flex align-items-center">
            <span class="text-light me-2 small">@_userDisplay</span>
            @if (_isLoggedIn)
            {
                <button class="btn btn-sm btn-outline-light" @onclick="SignOut">
                    <i class="bi bi-box-arrow-right me-1"></i>
                    Sign Out
                </button>
            }
        </div>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <hr class="border-secondary mx-3 my-2" />
        
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="login">
                <span class="bi bi-box-arrow-in-right" aria-hidden="true"></span> Login
            </NavLink>
        </div>

        <hr class="border-secondary mx-3 my-2" />

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="users">
                <span class="bi bi-people-fill-nav-menu" aria-hidden="true"></span> Users
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="categories">
                <span class="bi bi-tags-fill-nav-menu" aria-hidden="true"></span> Categories
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="accounts">
                <span class="bi bi-wallet-fill-nav-menu" aria-hidden="true"></span> Accounts
            </NavLink>
        </div>

        <hr class="border-secondary mx-3 my-2" />

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="users/create">
                <span class="bi bi-person-plus-fill-nav-menu" aria-hidden="true"></span> Create User
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="categories/create">
                <span class="bi bi-tag-fill-nav-menu" aria-hidden="true"></span> Create Category
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="accounts/create">
                <span class="bi bi-credit-card-2-front-fill-nav-menu" aria-hidden="true"></span> Create Account
            </NavLink>
        </div>
    </nav>
</div>

@code {
    // LLM-Dev:v3 Enhanced NavMenu to show user status and sign-out functionality, matching MAUI pattern
    private string _userDisplay = "Not signed in";
    private bool _isLoggedIn = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshUser();
    }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshUser();
    }

    private async Task RefreshUser()
    {
        try
        {
            var result = await ProtectedLocalStorage.GetAsync<string>("userId");
            var id = result.Success ? (result.Value ?? string.Empty).Trim() : string.Empty;
            
            if (string.IsNullOrWhiteSpace(id))
            {
                _userDisplay = "Not signed in";
                _isLoggedIn = false;
            }
            else
            {
                _userDisplay = $"User {id}";
                _isLoggedIn = true;
            }
        }
        catch
        {
            _userDisplay = "Not signed in";
            _isLoggedIn = false;
        }
        
        StateHasChanged();
    }

    private async Task SignOut()
    {
        try
        {
            await ProtectedLocalStorage.DeleteAsync("userId");
            _userDisplay = "Not signed in";
            _isLoggedIn = false;
            StateHasChanged();
        }
        catch
        {
            _userDisplay = "Not signed in";
            _isLoggedIn = false;
            StateHasChanged();
        }
    }
}

